name: Packer Build & Share Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  packer-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Package the Application
        run: |
          mvn package -DskipTests
          mkdir -p artifact
          cp target/*.jar artifact/

      - name: Upload JAR File for Packer
        uses: actions/upload-artifact@v4
        with:
          name: myapp-jar
          path: artifact/

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp-jar
          path: artifact/

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Initialize Packer Plugins
        run: packer init packer/ubuntu.pkr.hcl

      
      - name: Configure Github actions Dev user AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1

      - name: Test Dev User AWS credentials
        run: aws sts get-caller-identity

      - name: Run Packer to Build & Capture Output
        id: packer_build
        run: |
          packer build -on-error=abort \
            -var "aws_demo_account_id=${{ secrets.AWS_DEMO_ACCOUNT_ID }}" \
            -var-file=packer/variables.pkr.hcl \
            packer/ubuntu.pkr.hcl | tee packer_output.log

      
      - name: Get latest AMI ID from AWS
        id: get_ami_id
        run: |
            AMI_ID=$(aws ec2 describe-images --owners self --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text) && echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
              
      - name: Share AMI with AWS Demo Account
        run: |
            aws ec2 modify-image-attribute --image-id ${{ env.AMI_ID }} --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT_ID }}}]"
        
    
      - name: Configure Github actions Demo user AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: us-east-1

      - name: Test Demo user AWS credentials
        run: aws sts get-caller-identity

      - name: Create new Launch Template version in DEMO
        id: create_lt_version
        run: |
          echo "Creating new Launch Template version with AMI: ${{ env.AMI_ID }}"
      
          # Fetch Launch Template ID by name
          LT_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=csye6225-launch-template" \
            --query "LaunchTemplates[0].LaunchTemplateId" \
            --output text)
      
          echo "Launch Template ID: $LT_ID"
      
          # Create new version with updated AMI
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id "$LT_ID" \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
      
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Auto Scaling Group with latest Launch Template version
        run: |
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name csye6225_asg \
              --launch-template "LaunchTemplateName=csye6225-,Version=${{ env.NEW_VERSION }}"

      - name: Trigger ASG instance refresh
        id: instance_refresh
        run: |
            REFRESH_ID=$(aws autoscaling start-instance-refresh \
              --auto-scaling-group-name csye6225_asg \
              --strategy Rolling \
              --query 'InstanceRefreshId' \
              --output text)
          
            echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

            
      - name: Wait for Instance Refresh to Complete
        run: |
            echo "Waiting for instance refresh to complete..."
          
            for i in {1..30}; do
              STATUS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name csye6225_asg \
                --instance-refresh-ids ${{ env.REFRESH_ID }} \
                --query 'InstanceRefreshes[0].Status' \
                --output text)
          
              echo "Refresh status: $STATUS"
          
              if [[ "$STATUS" == "Successful" ]]; then
                echo "Instance refresh completed successfully"
                exit 0
              elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
                echo "Instance refresh failed"
                exit 1
              fi
          
              sleep 30
            done
          
            echo "Timeout waiting for instance refresh"
            exit 1
          
          


