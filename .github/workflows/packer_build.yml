name: Packer Build & Share Workflow

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ] 
  workflow_dispatch:

jobs:
  packer-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Package the Application
        run: |
          mvn package -DskipTests
          mkdir -p artifact
          cp target/*.jar artifact/

      - name: Upload JAR File for Packer
        uses: actions/upload-artifact@v4
        with:
          name: myapp-jar
          path: artifact/

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp-jar
          path: artifact/

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Initialize Packer Plugins
        run: packer init packer/ubuntu.pkr.hcl

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_DEV_SA_KEY }}

      - name: Run Packer to Build & Capture Output
        id: packer_build
        run: |
          packer build -on-error=abort \
            -var "db_username=${{ secrets.CSYE_DB_USERNAME }}" \
            -var "db_password=${{ secrets.CSYE_DB_PASSWORD }}" \
            -var "aws_demo_account_id=${{ secrets.AWS_DEMO_ACCOUNT_ID }}" \
            -var "gcp_demo_project_id=${{ secrets.GCP_DEMO_PROJECT_ID }}" \
            -var-file=packer/variables.pkr.hcl \
            packer/ubuntu.pkr.hcl | tee packer_output.log

      - name: Extract AMI & Machine Image
        id: extract_images
        run: |
          AWS_AMI_ID=$(grep -oP '"artifact_id":.*?"amazon-ebs:aws-ubuntu:\K[^"]+' packer_output.log)
          GCP_MACHINE_IMAGE_NAME=$(grep -oP '"artifact_id":.*?"googlecompute-machineimage:gcp-machine-image:\K[^"]+' packer_output.log)
          echo "AWS_AMI_ID=$AWS_AMI_ID" >> $GITHUB_ENV
          echo "GCP_MACHINE_IMAGE_NAME=$GCP_MACHINE_IMAGE_NAME" >> $GITHUB_ENV

      - name: Share AWS AMI with Demo Account
        run: |
          aws ec2 modify-image-attribute --image-id $AWS_AMI_ID --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT_ID }} }]"

      - name: Share GCP Machine Image with Demo Project
        run: |
          gcloud compute machine-images add-iam-policy-binding $GCP_MACHINE_IMAGE_NAME \
            --project=${{ secrets.GCP_DEMO_PROJECT_ID }} \
            --member="project:${{ secrets.GCP_DEMO_PROJECT_ID }}" \
            --role="roles/compute.imageUser"
